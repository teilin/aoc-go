package puzzles

import (
	"fmt"
	"sync"
)

type Puzzle interface {
	Part1() string
	Part2() string
}

type PuzzleRegistry struct {
	mu     sync.RWMutex
	puzzles map[string]Puzzle
}

func NewPuzzleRegistry() *PuzzleRegistry {
	return &PuzzleRegistry{
		puzzles: make(map[string]Puzzle),
	}
}

func (r *PuzzleRegistry) Register(year string, day string, puzzle Puzzle) {
	r.mu.Lock()
	defer r.mu.Unlock()
	key := fmt.Sprintf("%s/%s", year, day)
	r.puzzles[key] = puzzle
}

func (r *PuzzleRegistry) Get(year string, day string) (Puzzle, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()
	key := fmt.Sprintf("%s/%s", year, day)
	puzzle, exists := r.puzzles[key]
	if !exists {
		return nil, fmt.Errorf("puzzle not found for year %s and day %s", year, day)
	}
	return puzzle, nil
}